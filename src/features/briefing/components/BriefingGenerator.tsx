'use client';

import { useState } from 'react';
import { X, FileBarChart, Loader2, Download, Copy, CheckCircle } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { FileProcessingResult } from '@/types';
import { aiService } from '@/lib/ai-service';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { getPreferredAIModel } from '@/lib/utils';

interface BriefingGeneratorProps {
  content: FileProcessingResult[];
  onClose: () => void;
}

export function BriefingGenerator({ content, onClose }: BriefingGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [briefing, setBriefing] = useState<string>('');
  const [briefingTitle, setBriefingTitle] = useState('');
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const handleGenerateBriefing = async () => {
    if (content.length === 0) {
      toast({
        title: "No content available",
        description: "Please upload some documents or URLs first.",
      });
      return;
    }

    setIsGenerating(true);
    setBriefing('');

    try {
      // Create a mock collection ID for this session
      const collectionId = 'temp-collection-' + Date.now();
      
      // Prepare context from content
      const context = content.map((item, index) => ({
        id: `content-${index}`,
        text: item.text,
        source: {
          documentId: `doc-${index}`,
          documentTitle: item.metadata.customName || item.metadata.filename || item.metadata.summary || `Content ${index + 1}`,
          chunkId: `chunk-${index}`,
        },
        score: 1.0,
      }));

      // Generate briefing using AI service
      const response = await aiService.generateBriefing(
        collectionId,
        [], // No previous exchanges for now
        context,
        getPreferredAIModel()
      );

      setBriefing(response.answer);
      setBriefingTitle(`Briefing - ${new Date().toLocaleDateString()}`);
      
      toast({
        title: "Briefing generated successfully!",
        description: "Your comprehensive report is ready.",
      });
    } catch (error) {
      console.error('Error generating briefing:', error);
      toast({
        title: "Error generating briefing",
        description: error instanceof Error ? error.message : "Failed to generate briefing",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopyBriefing = async () => {
    try {
      // Copy the raw markdown content for better formatting when pasted
      await navigator.clipboard.writeText(briefing);
      setCopied(true);
      toast({
        title: "Copied to clipboard",
        description: "Briefing content has been copied as markdown to your clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: "Failed to copy",
        description: "Could not copy briefing to clipboard.",
      });
    }
  };

  const handleDownloadBriefing = () => {
    // Create a properly formatted markdown file with metadata
    const markdownContent = `# ${briefingTitle || 'AI Generated Briefing'}

*Generated on: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}*

---

${briefing}

---

*This briefing was generated by AI Knowledge Companion based on ${content.length} content items.*`;

    const element = document.createElement('a');
    const file = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' });
    element.href = URL.createObjectURL(file);
    element.download = `${briefingTitle || 'briefing'}.md`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    
    toast({
      title: "Downloaded successfully",
      description: "Briefing has been downloaded as a markdown file.",
    });
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-freshgreens-secondary-900 rounded-lg p-6 w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto border border-freshgreens-secondary-200 dark:border-freshgreens-secondary-700">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-freshgreens-primary-900 dark:text-white">Generate Briefing</h2>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            icon={<X className="w-5 h-5" />}
          >
            Close
          </Button>
        </div>

        {/* Content Summary */}
        <div className="mb-6 p-4 bg-freshgreens-secondary-100 dark:bg-freshgreens-secondary-800 rounded-lg">
          <h3 className="font-semibold text-freshgreens-primary-900 dark:text-white mb-2">
            Content to Analyze ({content.length} items)
          </h3>
          <div className="grid md:grid-cols-2 gap-2">
            {content.map((item, index) => (
              <div key={index} className="text-sm text-freshgreens-secondary-700 dark:text-freshgreens-secondary-200">
                â€¢ {item.metadata.customName || item.metadata.filename || item.metadata.summary || `Content ${index + 1}`}
              </div>
            ))}
          </div>
        </div>

        {/* Generate Button */}
        {!briefing && (
          <div className="text-center mb-6">
            <Button
              onClick={handleGenerateBriefing}
              disabled={isGenerating || content.length === 0}
              variant="primary"
              size="lg"
              loading={isGenerating}
              icon={!isGenerating ? <FileBarChart className="w-5 h-5" /> : undefined}
              className="mx-auto"
            >
              {isGenerating ? 'Generating Briefing...' : 'Generate Comprehensive Briefing'}
            </Button>
            <p className="text-sm text-freshgreens-secondary-600 dark:text-freshgreens-secondary-300 mt-3">
              AI will analyze your content and create a structured report with key insights, risks, and action items.
            </p>
          </div>
        )}

        {/* Briefing Content */}
        {briefing && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-freshgreens-primary-900 dark:text-white">Generated Briefing</h3>
              <div className="flex space-x-2">
                <Button
                  onClick={handleCopyBriefing}
                  variant="outline"
                  size="sm"
                  icon={copied ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                >
                  {copied ? 'Copied' : 'Copy'}
                </Button>
                <Button
                  onClick={handleDownloadBriefing}
                  variant="outline"
                  size="sm"
                  icon={<Download className="w-4 h-4" />}
                >
                  Download
                </Button>
              </div>
            </div>
            
            <div className="bg-freshgreens-secondary-100 dark:bg-freshgreens-secondary-800 rounded-lg p-4 max-h-96 overflow-y-auto">
              <div className="prose prose-sm max-w-none dark:prose-invert">
                <ReactMarkdown 
                  remarkPlugins={[remarkGfm]}
                  className="text-sm text-foreground"
                  components={{
                    table: ({ children }) => (
                      <div className="overflow-x-auto">
                        <table className="min-w-full border-collapse border border-gray-300 dark:border-gray-600">
                          {children}
                        </table>
                      </div>
                    ),
                    th: ({ children }) => (
                      <th className="border border-gray-300 dark:border-gray-600 px-3 py-2 bg-gray-100 dark:bg-gray-700 font-semibold text-left">
                        {children}
                      </th>
                    ),
                    td: ({ children }) => (
                      <td className="border border-gray-300 dark:border-gray-600 px-3 py-2">
                        {children}
                      </td>
                    ),
                    h1: ({ children }) => (
                      <h1 className="text-2xl font-bold text-foreground mb-4 mt-6 first:mt-0">
                        {children}
                      </h1>
                    ),
                    h2: ({ children }) => (
                      <h2 className="text-xl font-semibold text-foreground mb-3 mt-5">
                        {children}
                      </h2>
                    ),
                    h3: ({ children }) => (
                      <h3 className="text-lg font-medium text-foreground mb-2 mt-4">
                        {children}
                      </h3>
                    ),
                    p: ({ children }) => (
                      <p className="text-foreground mb-3 leading-relaxed">
                        {children}
                      </p>
                    ),
                    ul: ({ children }) => (
                      <ul className="list-disc list-inside text-foreground mb-3 space-y-1">
                        {children}
                      </ul>
                    ),
                    ol: ({ children }) => (
                      <ol className="list-decimal list-inside text-foreground mb-3 space-y-1">
                        {children}
                      </ol>
                    ),
                    li: ({ children }) => (
                      <li className="text-foreground">
                        {children}
                      </li>
                    ),
                    blockquote: ({ children }) => (
                      <blockquote className="border-l-4 border-primary pl-4 italic text-muted-foreground mb-3">
                        {children}
                      </blockquote>
                    ),
                    code: ({ children, className }) => {
                      const isInline = !className;
                      return isInline ? (
                        <code className="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-sm font-mono">
                          {children}
                        </code>
                      ) : (
                        <pre className="bg-gray-100 dark:bg-gray-800 p-3 rounded overflow-x-auto">
                          <code className="text-sm font-mono">{children}</code>
                        </pre>
                      );
                    },
                    hr: () => (
                      <hr className="border-t border-gray-300 dark:border-gray-600 my-6" />
                    ),
                  }}
                >
                  {briefing}
                </ReactMarkdown>
              </div>
            </div>
          </div>
        )}

        {/* Help Text */}
        <div className="mt-6 p-4 bg-freshgreens-tertiary-100 dark:bg-freshgreens-tertiary-900/30 rounded-lg border border-freshgreens-tertiary-200 dark:border-freshgreens-tertiary-800">
          <h4 className="font-medium text-freshgreens-primary-900 dark:text-white mb-2">What's included in the briefing?</h4>
          <ul className="text-sm text-freshgreens-secondary-700 dark:text-freshgreens-secondary-200 space-y-1">
            <li>â€¢ Executive summary of key findings</li>
            <li>â€¢ Main insights and discoveries</li>
            <li>â€¢ Potential risks and concerns</li>
            <li>â€¢ Recommended action items</li>
            <li>â€¢ Source references and citations</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
